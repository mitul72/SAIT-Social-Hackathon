"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/NGWZf0rtaZ9
 */
import Link from "next/link";
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useState, useEffect } from "react";
import useWebSocket from "react-use-websocket";
import Message from "@/components/Message";

export default function Chat() {
  const [inputMessage, setInputMessage] = useState("");
  const [thread_id, setThreadID] = useState(1);
  const [user, setUser] = useState("");
  const [messages, setMessages] = useState([""]);
  const [data, setData]: any = useState();

  let recievedMessages: Array<any> = [];
  let sender_payload = {
    content: inputMessage,
    type: 1,
    thread_id: thread_id,
    username: user,
  };
  let rec_payload = {
    content: inputMessage,
    type: 0,
    thread_id: thread_id,
    username: user,
  };
  function GetInterest() {
    const fetchData = async () => {
      const res = await fetch("/api/threads/", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }).then();
      return await res.json();
    };
    let data = fetchData();
    try {
      data.then((dat) => {
        let temp = Array.from(dat.data);
        const objectWithHighestId = temp.reduce(
          (maxObject: any, currentObject: any) => {
            return currentObject.id > maxObject.id ? currentObject : maxObject;
          },
          { id: -1 }
        ); // Set an initial object with an ID lower than any possible ID
        console.log(objectWithHighestId);
        setData(objectWithHighestId);
      });
    } catch (e) {
      console.error(e);
    }
    // return data;
  }
  useEffect(() => {
    setTimeout(() => {}, 2000);
    let dat = GetInterest();
  }, []);
  const WS_URL = "ws://saitface-a13849c8bb7c.herokuapp.com/ws";
  const { sendJsonMessage, lastMessage, readyState } = useWebSocket(
    "ws://saitface-a13849c8bb7c.herokuapp.com/ws"
  );
  useEffect(() => {
    if (lastMessage !== null) {
      try {
        sendJsonMessage(rec_payload);

        const receivedMessage = JSON.parse(lastMessage.data).content;
        // recievedMessages.push(receivedMessage);
        setMessages([...messages, receivedMessage]);
        console.log(setMessages);
      } catch (e) {
        console.error(e);
      }
      // Handle the received message as needed
    }
  }, [lastMessage, sendJsonMessage]);

  const sendMessage = () => {
    sendJsonMessage(rec_payload);
    sendJsonMessage(sender_payload);
    setInputMessage("");
  };
  return (
    <div
      style={{ height: "calc(100vh - 100px)" }}
      className="grid  w-full overflow-hidden lg:grid-cols-[260px_1fr]"
    >
      <aside className="hidden lg:block border-r bg-gray-100/40 dark:bg-gray-800/40">
        <div className="flex flex-col gap-4">
          <div className="flex h-[60px] items-center px-6">
            <Link className="flex items-center gap-2 font-semibold" href="#">
              <MessageCircleIcon className="h-6 w-6" />
              <span>SAIT FACE</span>
            </Link>
          </div>
          <h2 className="px-6 py-1 font-semibold text-gray-500">Channels</h2>
          <div className="flex-1 overflow-y-auto">
            <nav className="grid gap-2 px-6">
              <Link
                className="flex items-center gap-2 rounded-lg px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <TextIcon className="h-4 w-4" />
                General
              </Link>
              <Link
                className="flex items-center gap-2 rounded-lg px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <TextIcon className="h-4 w-4" />
                Team Updates
              </Link>
              <Link
                className="flex items-center gap-2 rounded-lg px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="#"
              >
                <TextIcon className="h-4 w-4" />
                Project A
              </Link>
            </nav>
          </div>
        </div>
      </aside>
      <section className="flex flex-col">
        <div className="flex gap-2">
          {data && (
            <span className="ml-5 text-xl px-5 bg-black bg-opacity-5 rounded-3xl  py-1">
              {data.title}
            </span>
          )}
        </div>

        <div className="flex h-16 items-center border-b bg-gray-100/40 px-6 dark:bg-gray-800/40">
          <h1 className="font-semibold text-lg">
            <div className="flex gap-2">
              {data ? (
                data.interests.map((value: any) => (
                  <p
                    key={value}
                    className="px-4 py-[2px] bg-black bg-opacity-10 rounded-2xl"
                  >
                    {value}
                  </p>
                ))
              ) : (
                <p>Loading...</p>
              )}
            </div>
          </h1>
        </div>
        <ScrollArea className=" p-4 space-y-4">
          <div className="flex flex-col gap-4 items-start">
            {messages.map((item, index) => (
              <>
                <Message key={index} message={item} />
              </>
            ))}
          </div>
        </ScrollArea>
        <div className="flex mt-auto h-16 items-center border-t bg-gray-100/40 px-6 dark:bg-gray-800/40">
          <form
            className="w-full"
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                e.preventDefault();
                sendJsonMessage(inputMessage);
              }
            }}
            onSubmit={(e) => {
              /**
               * Prevent submit from reloading the page
               */
              e.preventDefault();
              e.stopPropagation();
              sendJsonMessage(inputMessage);
            }}
          >
            <div className="relative">
              <FileEditIcon className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
              <input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                className="pl-8 w-full h-10 rounded-md bg-white dark:bg-gray-800"
                placeholder="Type your message..."
                type="text"
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault(); // Prevent newline insertion
                    sendMessage();
                  }
                }}
              />
            </div>
          </form>
        </div>
      </section>
    </div>
  );
}

function MessageCircleIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z" />
    </svg>
  );
}

function TextIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 6.1H3" />
      <path d="M21 12.1H3" />
      <path d="M15.1 18H3" />
    </svg>
  );
}

function FileEditIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 13.5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-5.5" />
      <polyline points="14 2 14 8 20 8" />
      <path d="M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z" />
    </svg>
  );
}
